# Check https://circleci.com/docs/2.0/ for more details
# for config.yml syntax see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1

# for testing on Windows
# https://circleci.com/docs/2.0/hello-world-windows/
orbs:
  win: circleci/windows@1

executors:
  mac:
    macos:
      xcode: "13.0.0"

commands:
  early-stop:
    description: |
      Early halt if this commit is for testing binaries for different platform
      Place this command AFTER checkout command because we need to look
      at the commit subject text
    parameters:
      substring:
        type: string
        description: String to search for in the commit subject to skip build
    steps:
      - run:
          name: Checking OS platform for "<< parameters.substring >>"
          command: node ./early-stop "<< parameters.substring >>" || circleci step halt
jobs:
  mac-test:
    executor: mac

    working_directory: ~/repo

    steps:
      - checkout
      - early-stop:
          substring: Testing new win32
      - early-stop:
          substring: Testing new linux

      # Download and cache dependencies for the app and for tests
      - restore_cache:
          keys:
            - v{{ .Environment.CACHE_VERSION }}-dependencies-v2-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v{{ .Environment.CACHE_VERSION }}-dependencies-v2-{{ arch }}-{{ .Branch }}-

      - run: npm ci
      - run: npm install @cypress/commit-message-install
      - run: $(npm bin)/commit-message-install --else "npm install cypress"
      - run: npx cypress cache path

      - save_cache:
          paths:
            # local NPM modules
            - node_modules
            # all NPM modules
            - ~/.npm
            # Cypress binary (or yarn dependencies) on Linux
            - ~/Library/Caches/Cypress
          key: v{{ .Environment.CACHE_VERSION }}-dependencies-v2-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}

      - run: $(npm bin)/commit-message-install --else "npm install cypress"
      - run: $(npm bin)/run-if npm run cypress:info
      - run: $(npm bin)/run-if npm run cypress:version
      - run: $(npm bin)/run-if npm run cypress:run
      - run: $(npm bin)/run-if npm run check-videos
      - run: $(npm bin)/run-if npm run cypress:cache:list

      - run:
          when: on_success
          name: Set status check
          command: $(npm bin)/set-status --state success --description "on CircleCI"
      - run:
          when: on_fail
          name: Set status check
          command: $(npm bin)/set-status --state failure --description "on CircleCI"

  linux-test:
    docker:
      # find Docker image at https://github.com/cypress-io/cypress-docker-images
      - image: cypress/base:16.14.2-slim

    working_directory: ~/repo

    steps:
      - checkout
      - early-stop:
          substring: Testing new win32
      - early-stop:
          substring: Testing new darwin

      # Download and cache dependencies for the app and for tests
      - restore_cache:
          keys:
            - v{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{ .Branch }}-

      - run: npm ci

      - save_cache:
          paths:
            # local NPM modules
            - node_modules
            # all NPM modules
            - ~/.npm
            # Cypress binary (or yarn dependencies) on Linux
            - ~/.cache
          key: v{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}

      - run: npm install @cypress/commit-message-install
      - run: $(npm bin)/commit-message-install --else "npm install cypress"
      - run: $(npm bin)/run-if npm run cypress:version
      - run: $(npm bin)/run-if npm run cypress:run
      - run: $(npm bin)/run-if npm run check-videos
      - run: $(npm bin)/run-if npm run cypress:info
      - run: $(npm bin)/run-if npm run cypress:cache:list

      - run:
          when: on_success
          name: Set status check
          command: $(npm bin)/set-status --state success --description "on CircleCI"
      - run:
          when: on_fail
          name: Set status check
          command: $(npm bin)/set-status --state failure --description "on CircleCI"

  win-test:
    working_directory: ~/app
    executor:
      name: win/vs2019
      shell: bash.exe
    steps:
      - checkout
      - early-stop:
          substring: Testing new linux
      - early-stop:
          substring: Testing new darwin

      - restore_cache:
          key: v{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}

      - run: npm ci

      - save_cache:
          key: v{{ .Environment.CACHE_VERSION }}-dependencies-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            # could not use environment variables for some reason
            - C:\Users\circleci\AppData\Local\Cypress\Cache
            - C:\Users\circleci\AppData\Roaming\npm-cache

      - run: npm install @cypress/commit-message-install
      - run: $(npm bin)/commit-message-install --else "npm install cypress"
      - run: $(npm bin)/run-if npm run cypress:version
      - run: $(npm bin)/run-if npm run cypress:run
      - run: $(npm bin)/run-if npm run cypress:info
      - run: $(npm bin)/run-if npm run cypress:cache:list
      - run:
          name: check videos
          command: $(npm bin)/run-if npm run check-videos
          environment:
            DEBUG: ok-file

      - run:
          when: on_success
          name: Set status check
          command: $(npm bin)/set-status --state success --description "on CircleCI"
      - run:
          when: on_fail
          name: Set status check
          command: $(npm bin)/set-status --state failure --description "on CircleCI"

workflows:
  version: 2
  tests:
    jobs:
      - win-test:
          context: test-runner:commit-status-checks
      - linux-test:
          context: test-runner:commit-status-checks
      - mac-test:
          context: test-runner:commit-status-checks
